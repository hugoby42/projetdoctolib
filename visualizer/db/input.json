[
    {
        "id": 0,
        "nom": "Gimzia",
        "prenom": "Ananda",
        "dateNaissance": "11/08/1991",
        "lieuNaissance": "Saint-julien-du-serre",
        "dateEntretien": "24/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "0000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 12,
                    "variableNameQuality": 0.6447572070964005,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "0001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 15,
                    "variableNameQuality": 0.19199214453499247,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "0002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 18,
                    "variableNameQuality": 0.10114404488130158,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "0003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 18,
                    "variableNameQuality": 0.4668005518569843,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "0004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 52,
                    "commentCount": 71,
                    "variableNameQuality": 0.2260152198366897,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "0005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 91,
                    "variableNameQuality": 0.15489575350282758,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "0006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 67,
                    "variableNameQuality": 0.8271913437766327,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "0007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 57,
                    "variableNameQuality": 0.03955046806935447,
                    "duplicate": [
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "0008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 81,
                    "variableNameQuality": 0.9688969523608681,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "0009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 5,
                    "commentCount": 70,
                    "variableNameQuality": 0.7903786354753941,
                    "duplicate": [
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "0010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 94,
                    "commentCount": 76,
                    "variableNameQuality": 0.2261640691120278,
                    "duplicate": [
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 1,
        "nom": "Guegniau",
        "prenom": "Harley",
        "dateNaissance": "20/08/1978",
        "lieuNaissance": "Xeuilley",
        "dateEntretien": "8/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "1000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 29,
                    "commentCount": 8,
                    "variableNameQuality": 0.7641329386948942,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "1001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 62,
                    "variableNameQuality": 0.3496540421768046,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "1002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 72,
                    "variableNameQuality": 0.2433909253257187,
                    "duplicate": [
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 2,
        "nom": "Berlande",
        "prenom": "Mervyn",
        "dateNaissance": "08/06/1984",
        "lieuNaissance": "Fosse-de-tigne",
        "dateEntretien": "5/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 3,
        "nom": "Selmo",
        "prenom": "Anson",
        "dateNaissance": "19/02/1985",
        "lieuNaissance": "Trausse",
        "dateEntretien": "24/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 4,
        "nom": "Beisser",
        "prenom": "Titania",
        "dateNaissance": "20/04/1988",
        "lieuNaissance": "Sommesous",
        "dateEntretien": "15/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "4000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 11,
                    "variableNameQuality": 0.9058890467832398,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "4001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 10,
                    "variableNameQuality": 0.49285462739317276,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "4002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 48,
                    "variableNameQuality": 0.6049252020229682,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "4003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 93,
                    "variableNameQuality": 0.47809376555041216,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "4004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 53,
                    "variableNameQuality": 0.0888835855503125,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "4005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 24,
                    "variableNameQuality": 0.44993342143257575,
                    "duplicate": [
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "4006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 38,
                    "variableNameQuality": 0.40475283757904046,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "4007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 69,
                    "variableNameQuality": 0.7164156964720889,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "4008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 2,
                    "variableNameQuality": 0.2702893124003123,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "4009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 97,
                    "variableNameQuality": 0.19667554218443684,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "4010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 58,
                    "commentCount": 71,
                    "variableNameQuality": 0.19247327228308286,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "4011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 47,
                    "commentCount": 50,
                    "variableNameQuality": 0.5803397062975735,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "4012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 72,
                    "variableNameQuality": 0.04829271971041571,
                    "duplicate": [
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "4013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 41,
                    "commentCount": 16,
                    "variableNameQuality": 0.755078573298204,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "4014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 75,
                    "variableNameQuality": 0.21102513095425435,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "4015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 50,
                    "commentCount": 3,
                    "variableNameQuality": 0.805135650900493,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "4016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 94,
                    "commentCount": 73,
                    "variableNameQuality": 0.8157280127378658,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "4017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 95,
                    "variableNameQuality": 0.27860386217428634,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "4018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 9,
                    "variableNameQuality": 0.4285247044068059,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 5,
        "nom": "Jumilly",
        "prenom": "Alphonsine",
        "dateNaissance": "19/12/1974",
        "lieuNaissance": "Pouillenay",
        "dateEntretien": "5/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "5000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 38,
                    "variableNameQuality": 0.5727489359345049,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "5001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 5,
                    "commentCount": 49,
                    "variableNameQuality": 0.29808861648899354,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 6,
        "nom": "Triboulin",
        "prenom": "Nigel",
        "dateNaissance": "29/07/1976",
        "lieuNaissance": "Fosses-et-baleyssac",
        "dateEntretien": "13/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "6000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 36,
                    "variableNameQuality": 0.9677748416313222,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 31,
                    "variableNameQuality": 0.560580868158938,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "6002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 9,
                    "variableNameQuality": 0.3848118613733319,
                    "duplicate": [
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "6003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 15,
                    "variableNameQuality": 0.6758519520581182,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "6004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 57,
                    "variableNameQuality": 0.7125672479664439,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 100,
                    "variableNameQuality": 0.9784913423371313,
                    "duplicate": [
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "6006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 41,
                    "variableNameQuality": 0.19311106567223413,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 30,
                    "commentCount": 74,
                    "variableNameQuality": 0.500434774177637,
                    "duplicate": [
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "6008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 31,
                    "commentCount": 3,
                    "variableNameQuality": 0.13698975918102463,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "6009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 63,
                    "variableNameQuality": 0.8265119759831514,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "6010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 51,
                    "commentCount": 30,
                    "variableNameQuality": 0.2500199689654259,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "6011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 27,
                    "commentCount": 84,
                    "variableNameQuality": 0.0329741756033507,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 48,
                    "variableNameQuality": 0.6779275803357121,
                    "duplicate": [
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 1,
                    "variableNameQuality": 0.39005883246480555,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "6014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 68,
                    "variableNameQuality": 0.9059800457391527,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 73,
                    "variableNameQuality": 0.29152761018896123,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "6016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 0,
                    "variableNameQuality": 0.20480172247875195,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 7,
        "nom": "Valsin",
        "prenom": "Dion",
        "dateNaissance": "05/06/1972",
        "lieuNaissance": "Casses",
        "dateEntretien": "17/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "7000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 54,
                    "variableNameQuality": 0.08231179409804446,
                    "duplicate": [
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "7001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 6,
                    "variableNameQuality": 0.8769156425022675,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "7002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 21,
                    "variableNameQuality": 0.17789820243403498,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 8,
        "nom": "Popieul",
        "prenom": "Rosamund",
        "dateNaissance": "20/05/1977",
        "lieuNaissance": "Fagnieres",
        "dateEntretien": "5/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "8000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 77,
                    "variableNameQuality": 0.2555954056423093,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "8001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 34,
                    "variableNameQuality": 0.046402833867980164,
                    "duplicate": [
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "8002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 98,
                    "variableNameQuality": 0.1374170458581082,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "8003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 41,
                    "variableNameQuality": 0.90094961782439,
                    "duplicate": [
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "8004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 30,
                    "variableNameQuality": 0.9519970020821504,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "8005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 49,
                    "commentCount": 61,
                    "variableNameQuality": 0.8662280072279923,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "8006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 5,
                    "commentCount": 28,
                    "variableNameQuality": 0.23294130880892316,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "8007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 97,
                    "variableNameQuality": 0.21079463272149968,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "8008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 34,
                    "variableNameQuality": 0.0580381226231127,
                    "duplicate": [
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "8009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 21,
                    "commentCount": 48,
                    "variableNameQuality": 0.7785578693130569,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "8010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 69,
                    "variableNameQuality": 0.10637737890399601,
                    "duplicate": [
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 9,
        "nom": "Stabik",
        "prenom": "Djamila",
        "dateNaissance": "15/10/1976",
        "lieuNaissance": "Menetreol-sur-sauldre",
        "dateEntretien": "2/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "9000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 10,
                    "commentCount": 38,
                    "variableNameQuality": 0.9571202113954947,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "9001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 77,
                    "variableNameQuality": 0.016139840399080674,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "9002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 41,
                    "commentCount": 91,
                    "variableNameQuality": 0.6076118548914277,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            },
            {
                "id": "9003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 19,
                    "commentCount": 88,
                    "variableNameQuality": 0.39381206136830627,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "9004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 6,
                    "variableNameQuality": 0.0675645721530096,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "9005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 98,
                    "variableNameQuality": 0.7926061682982398,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            },
            {
                "id": "9006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 52,
                    "variableNameQuality": 0.2444690120940839,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "9007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 94,
                    "variableNameQuality": 0.7974895048842356,
                    "duplicate": [
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "9008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 4,
                    "variableNameQuality": 0.29129767852265376,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 10,
        "nom": "Kydts",
        "prenom": "Belle",
        "dateNaissance": "18/08/1982",
        "lieuNaissance": "Cernoy-en-berry",
        "dateEntretien": "16/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "10000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 82,
                    "variableNameQuality": 0.08409724924408424,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "10001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 58,
                    "commentCount": 28,
                    "variableNameQuality": 0.5057379080165053,
                    "duplicate": [
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "10002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 63,
                    "variableNameQuality": 0.8970608812108364,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "10003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 3,
                    "commentCount": 73,
                    "variableNameQuality": 0.43124477721797905,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "10004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 82,
                    "variableNameQuality": 0.9140123380872671,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "10005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 1,
                    "variableNameQuality": 0.04683295271550347,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "10006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 22,
                    "variableNameQuality": 0.07349367374214066,
                    "duplicate": [
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "10007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 71,
                    "variableNameQuality": 0.9928804600069882,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "10008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 99,
                    "variableNameQuality": 0.915905571549562,
                    "duplicate": [
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "10009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 32,
                    "variableNameQuality": 0.47828069871955703,
                    "duplicate": [
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "10010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 10,
                    "variableNameQuality": 0.10213621726365008,
                    "duplicate": [
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "10011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 100,
                    "commentCount": 52,
                    "variableNameQuality": 0.22949947748041521,
                    "duplicate": [
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "10012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 90,
                    "variableNameQuality": 0.26253658826983506,
                    "duplicate": [
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 11,
        "nom": "Maraval",
        "prenom": "Duane",
        "dateNaissance": "01/10/1975",
        "lieuNaissance": "Lafeuillade-en-vezie",
        "dateEntretien": "2/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "11000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 30,
                    "commentCount": 28,
                    "variableNameQuality": 0.37270979883535515,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "11001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 89,
                    "variableNameQuality": 0.09163230435516545,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            },
            {
                "id": "11002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 48,
                    "variableNameQuality": 0.7499442078438068,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "11003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 69,
                    "variableNameQuality": 0.1290702093657491,
                    "duplicate": [
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "11004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 59,
                    "variableNameQuality": 0.9483659359936889,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "11005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 68,
                    "variableNameQuality": 0.9640851264426245,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            },
            {
                "id": "11006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 29,
                    "commentCount": 76,
                    "variableNameQuality": 0.45108244114493756,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "11007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 76,
                    "variableNameQuality": 0.06708206141174933,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "11008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 43,
                    "variableNameQuality": 0.3756429586707406,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "11009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 49,
                    "commentCount": 49,
                    "variableNameQuality": 0.10235909070644689,
                    "duplicate": [
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            },
            {
                "id": "11010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 81,
                    "commentCount": 86,
                    "variableNameQuality": 0.5566036288635423,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "11011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 79,
                    "commentCount": 61,
                    "variableNameQuality": 0.1234453150853504,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "11012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 81,
                    "commentCount": 76,
                    "variableNameQuality": 0.7759528335099554,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "11013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 18,
                    "variableNameQuality": 0.5192750418325408,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "11014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 89,
                    "commentCount": 4,
                    "variableNameQuality": 0.7279197988903127,
                    "duplicate": [
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "11015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 34,
                    "variableNameQuality": 0.7749930933534167,
                    "duplicate": [
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "11016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 73,
                    "variableNameQuality": 0.0716053766100253,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            },
            {
                "id": "11017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 15,
                    "variableNameQuality": 0.33393594550252836,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "11018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 33,
                    "commentCount": 29,
                    "variableNameQuality": 0.9692747882896013,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            },
            {
                "id": "11019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 50,
                    "variableNameQuality": 0.8149556137177445,
                    "duplicate": [
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "11020",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 58,
                    "commentCount": 33,
                    "variableNameQuality": 0.0911904893972264,
                    "duplicate": [
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 12,
        "nom": "Decleves",
        "prenom": "Isra",
        "dateNaissance": "20/01/1976",
        "lieuNaissance": "Ta\u00efx",
        "dateEntretien": "18/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "12000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 27,
                    "commentCount": 75,
                    "variableNameQuality": 0.914039321784539,
                    "duplicate": [
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "12001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 99,
                    "variableNameQuality": 0.4134536479496437,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "12002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 52,
                    "variableNameQuality": 0.10603465332621131,
                    "duplicate": [
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "12003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 48,
                    "variableNameQuality": 0.5438283651616304,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "12004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 55,
                    "variableNameQuality": 0.41498635583290255,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "12005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 89,
                    "variableNameQuality": 0.21687022551618718,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "12006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 36,
                    "variableNameQuality": 0.1352928919265871,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "12007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 63,
                    "commentCount": 44,
                    "variableNameQuality": 0.8325717603165212,
                    "duplicate": [
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "12008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 36,
                    "variableNameQuality": 0.1598418101469462,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "12009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 76,
                    "variableNameQuality": 0.32841128971508493,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "12010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 46,
                    "variableNameQuality": 0.15996644878513389,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "12011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 7,
                    "variableNameQuality": 0.6444926534964973,
                    "duplicate": [
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "12012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 11,
                    "commentCount": 5,
                    "variableNameQuality": 0.6602677960265929,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "12013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 69,
                    "variableNameQuality": 0.2342235735845366,
                    "duplicate": [
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "12014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 77,
                    "variableNameQuality": 0.5389357084817026,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "12015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 20,
                    "variableNameQuality": 0.03702384265878278,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "12016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 67,
                    "variableNameQuality": 0.7369775466319568,
                    "duplicate": [
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "12017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 24,
                    "commentCount": 44,
                    "variableNameQuality": 0.47622476246435064,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 13,
        "nom": "Lemitre",
        "prenom": "Haydn",
        "dateNaissance": "23/12/1971",
        "lieuNaissance": "Villemardy",
        "dateEntretien": "8/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "13000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 74,
                    "variableNameQuality": 0.45780528061161396,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "13001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 94,
                    "variableNameQuality": 0.09323911810574104,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 14,
        "nom": "Badenne",
        "prenom": "Donald",
        "dateNaissance": "28/10/1990",
        "lieuNaissance": "Masnieres",
        "dateEntretien": "12/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "14000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 42,
                    "variableNameQuality": 0.8594174124673459,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 15,
        "nom": "Galego",
        "prenom": "Zeus",
        "dateNaissance": "06/12/1996",
        "lieuNaissance": "Margerides",
        "dateEntretien": "26/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "15000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 76,
                    "variableNameQuality": 0.8985656566317567,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "15001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 0,
                    "commentCount": 73,
                    "variableNameQuality": 0.8883604531901061,
                    "duplicate": [
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "15002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 93,
                    "variableNameQuality": 0.26696411791928265,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 16,
        "nom": "Veronneau",
        "prenom": "Conway",
        "dateNaissance": "17/02/1982",
        "lieuNaissance": "Luc-sur-orbieu",
        "dateEntretien": "6/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "16000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 89,
                    "variableNameQuality": 0.9788455326364747,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "16001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 5,
                    "variableNameQuality": 0.10273037422883435,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 17,
        "nom": "Persant",
        "prenom": "Youssef",
        "dateNaissance": "11/04/1991",
        "lieuNaissance": "Saint-just-luzac",
        "dateEntretien": "25/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "17000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 7,
                    "commentCount": 69,
                    "variableNameQuality": 0.25149567392297,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "17001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 100,
                    "commentCount": 20,
                    "variableNameQuality": 0.8539886921677012,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "17002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 66,
                    "commentCount": 21,
                    "variableNameQuality": 0.7046780085283264,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "17003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 12,
                    "variableNameQuality": 0.1640365159484669,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            },
            {
                "id": "17004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 52,
                    "variableNameQuality": 0.4960808477273322,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "17005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 79,
                    "variableNameQuality": 0.4824627121528089,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 18,
        "nom": "Verninas",
        "prenom": "Amen",
        "dateNaissance": "04/09/1998",
        "lieuNaissance": "Arre",
        "dateEntretien": "6/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 19,
        "nom": "Hirep",
        "prenom": "Philip",
        "dateNaissance": "03/06/1989",
        "lieuNaissance": "Etivey",
        "dateEntretien": "30/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "19000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 31,
                    "commentCount": 74,
                    "variableNameQuality": 0.08850087237748872,
                    "duplicate": [
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "19001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 78,
                    "commentCount": 41,
                    "variableNameQuality": 0.20428305265633284,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 20,
        "nom": "Storrer",
        "prenom": "Dominique",
        "dateNaissance": "18/09/1994",
        "lieuNaissance": "Presilly-74",
        "dateEntretien": "9/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "20000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 38,
                    "variableNameQuality": 0.5774985982705972,
                    "duplicate": [
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 31,
                    "commentCount": 22,
                    "variableNameQuality": 0.24257627147025995,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "20002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 57,
                    "variableNameQuality": 0.38326455544193927,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 66,
                    "variableNameQuality": 0.6594540576666397,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 14,
                    "variableNameQuality": 0.4201700726990246,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "20005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 29,
                    "commentCount": 37,
                    "variableNameQuality": 0.4274059688745384,
                    "duplicate": [
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "20006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 65,
                    "variableNameQuality": 0.8064096038577888,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "20007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 70,
                    "variableNameQuality": 0.0781038318295374,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "20008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 21,
                    "variableNameQuality": 0.8924642807106251,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "20009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 11,
                    "variableNameQuality": 0.6892969578562775,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 0,
                    "commentCount": 26,
                    "variableNameQuality": 0.04395316637986335,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "20011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 92,
                    "variableNameQuality": 0.6856097069117922,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "20012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 7,
                    "commentCount": 71,
                    "variableNameQuality": 0.5901403632404943,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "20013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 74,
                    "variableNameQuality": 0.9033185470240644,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "20014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 53,
                    "variableNameQuality": 0.24878649243972595,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 24,
                    "commentCount": 83,
                    "variableNameQuality": 0.5754066060303643,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "20016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 25,
                    "variableNameQuality": 0.48606390421783985,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "20017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 3,
                    "variableNameQuality": 0.729402138021487,
                    "duplicate": [
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "20018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 80,
                    "variableNameQuality": 0.652791380356474,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "20019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 23,
                    "variableNameQuality": 0.162371059419675,
                    "duplicate": [
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "20020",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 89,
                    "commentCount": 32,
                    "variableNameQuality": 0.499235436518374,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "20021",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 24,
                    "variableNameQuality": 0.9760939489176154,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20022",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 63,
                    "variableNameQuality": 0.535714662667652,
                    "duplicate": [
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "20023",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 15,
                    "variableNameQuality": 0.023253693377334628,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "20024",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 47,
                    "variableNameQuality": 0.2593937221582868,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "20025",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 37,
                    "variableNameQuality": 0.11976574755039437,
                    "duplicate": [
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "20026",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 8,
                    "commentCount": 68,
                    "variableNameQuality": 0.9885316232264563,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "20027",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 65,
                    "variableNameQuality": 0.6570033591841674,
                    "duplicate": [
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "20028",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 87,
                    "variableNameQuality": 0.48729598603035484,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "20029",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 71,
                    "commentCount": 40,
                    "variableNameQuality": 0.0063993896376678405,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 21,
        "nom": "Gachassin",
        "prenom": "Lillie",
        "dateNaissance": "01/11/1996",
        "lieuNaissance": "Cazeaux-de-larboust",
        "dateEntretien": "7/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "21000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 20,
                    "commentCount": 89,
                    "variableNameQuality": 0.8234608074071107,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "21001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 94,
                    "commentCount": 45,
                    "variableNameQuality": 0.6396068160729141,
                    "duplicate": [
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "21002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 21,
                    "commentCount": 45,
                    "variableNameQuality": 0.8361565648471071,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "21003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 32,
                    "variableNameQuality": 0.13353937305294883,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "21004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 98,
                    "variableNameQuality": 0.9770192352857848,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "21005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 62,
                    "variableNameQuality": 0.4774522359241037,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "21006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 33,
                    "variableNameQuality": 0.3766067251412186,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 22,
        "nom": "Pellizzer",
        "prenom": "Rob",
        "dateNaissance": "04/05/1976",
        "lieuNaissance": "Flacy",
        "dateEntretien": "26/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "22000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 100,
                    "commentCount": 64,
                    "variableNameQuality": 0.17039959875066246,
                    "duplicate": [
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "22001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 33,
                    "variableNameQuality": 0.30820085029030675,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "22002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 36,
                    "variableNameQuality": 0.4587968956409979,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "22003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 94,
                    "commentCount": 36,
                    "variableNameQuality": 0.4252401711292384,
                    "duplicate": [
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "22004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 15,
                    "variableNameQuality": 0.8041822690071542,
                    "duplicate": [
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "22005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 48,
                    "commentCount": 66,
                    "variableNameQuality": 0.33986770543526035,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "22006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 30,
                    "commentCount": 99,
                    "variableNameQuality": 0.7811058547854266,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "22007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 98,
                    "variableNameQuality": 0.6170676628821206,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "22008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 51,
                    "commentCount": 98,
                    "variableNameQuality": 0.6418969650163483,
                    "duplicate": [
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "22009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 50,
                    "commentCount": 33,
                    "variableNameQuality": 0.36188333559583297,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "22010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 16,
                    "variableNameQuality": 0.37567260469564034,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "22011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 76,
                    "variableNameQuality": 0.23427204208175145,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "22012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 27,
                    "variableNameQuality": 0.8730279343132993,
                    "duplicate": [
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "22013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 7,
                    "commentCount": 4,
                    "variableNameQuality": 0.0945778457649663,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "22014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 89,
                    "commentCount": 24,
                    "variableNameQuality": 0.9029970397807646,
                    "duplicate": [
                        {
                            "id": 11,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "22015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 72,
                    "variableNameQuality": 0.4730308785379408,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "22016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 6,
                    "variableNameQuality": 0.5694210766983699,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "22017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 71,
                    "variableNameQuality": 0.8765387704452108,
                    "duplicate": [
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "22018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 60,
                    "variableNameQuality": 0.27174536371955493,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "22019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 29,
                    "variableNameQuality": 0.9795150543438882,
                    "duplicate": [
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 23,
        "nom": "Bincteux",
        "prenom": "Marco",
        "dateNaissance": "16/05/1987",
        "lieuNaissance": "Penin",
        "dateEntretien": "11/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "23000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 97,
                    "variableNameQuality": 0.5801725581442639,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "23001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 93,
                    "variableNameQuality": 0.3065042935373462,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 24,
        "nom": "Mahes",
        "prenom": "Norris",
        "dateNaissance": "03/11/1990",
        "lieuNaissance": "Hanvoile",
        "dateEntretien": "23/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 25,
        "nom": "Jouis",
        "prenom": "Avis",
        "dateNaissance": "24/12/1998",
        "lieuNaissance": "Loupiac-81",
        "dateEntretien": "20/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "25000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 23,
                    "variableNameQuality": 0.5020297281970982,
                    "duplicate": [
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "25001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 62,
                    "variableNameQuality": 0.5600375143568376,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 26,
        "nom": "Hanniet",
        "prenom": "Stephanos",
        "dateNaissance": "27/05/1983",
        "lieuNaissance": "Neuville-les-bray",
        "dateEntretien": "29/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "26000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 26,
                    "variableNameQuality": 0.41469662314811895,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "26001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 84,
                    "variableNameQuality": 0.8743555981514299,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 27,
        "nom": "L'honneur",
        "prenom": "Ahmad",
        "dateNaissance": "05/09/1988",
        "lieuNaissance": "Condeau",
        "dateEntretien": "17/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "27000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 79,
                    "commentCount": 51,
                    "variableNameQuality": 0.7136113194532887,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "27001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 62,
                    "variableNameQuality": 0.5758347597337424,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "27002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 14,
                    "variableNameQuality": 0.773087708626996,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "27003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 15,
                    "variableNameQuality": 0.9788007607967839,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "27004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 81,
                    "variableNameQuality": 0.21844937128575237,
                    "duplicate": [
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "27005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 29,
                    "commentCount": 58,
                    "variableNameQuality": 0.2427527564967903,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "27006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 10,
                    "variableNameQuality": 0.4972386773279426,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "27007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 22,
                    "variableNameQuality": 0.19536211150282623,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 28,
        "nom": "Dabescat",
        "prenom": "Alin",
        "dateNaissance": "01/03/1993",
        "lieuNaissance": "Arnancourt",
        "dateEntretien": "15/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "28000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 6,
                    "variableNameQuality": 0.6744332756152495,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "28001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 24,
                    "commentCount": 12,
                    "variableNameQuality": 0.7594152756455619,
                    "duplicate": [
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "28002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 46,
                    "variableNameQuality": 0.49268103521661644,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "28003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 31,
                    "commentCount": 35,
                    "variableNameQuality": 0.36706732596169744,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "28004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 78,
                    "commentCount": 70,
                    "variableNameQuality": 0.45040895123054303,
                    "duplicate": [
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "28005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 96,
                    "variableNameQuality": 0.25569272683761723,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "28006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 79,
                    "commentCount": 83,
                    "variableNameQuality": 0.830915830019569,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "28007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 41,
                    "variableNameQuality": 0.3259665453527937,
                    "duplicate": [
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "28008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 21,
                    "commentCount": 53,
                    "variableNameQuality": 0.8329273151275812,
                    "duplicate": [
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "28009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 60,
                    "commentCount": 71,
                    "variableNameQuality": 0.5557274987248658,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "28010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 58,
                    "variableNameQuality": 0.9687894179347321,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "28011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 63,
                    "commentCount": 62,
                    "variableNameQuality": 0.3442963421124906,
                    "duplicate": [
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "28012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 52,
                    "commentCount": 27,
                    "variableNameQuality": 0.7686977705204099,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "28013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 30,
                    "variableNameQuality": 0.39257523238070025,
                    "duplicate": [
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "28014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 47,
                    "commentCount": 13,
                    "variableNameQuality": 0.3053954650842231,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "28015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 71,
                    "variableNameQuality": 0.5639732710842886,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "28016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 37,
                    "variableNameQuality": 0.5034721388661343,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "28017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 60,
                    "variableNameQuality": 0.011211903420855207,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 29,
        "nom": "Courtand",
        "prenom": "Vina",
        "dateNaissance": "25/07/1983",
        "lieuNaissance": "Saint-romain-au-mont-d-or",
        "dateEntretien": "22/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 30,
        "nom": "Bonnanfant",
        "prenom": "Lucie",
        "dateNaissance": "21/11/1977",
        "lieuNaissance": "Bouee",
        "dateEntretien": "9/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "30000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 46,
                    "variableNameQuality": 0.8631015393270963,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "30001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 55,
                    "variableNameQuality": 0.880091340767859,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "30002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 41,
                    "variableNameQuality": 0.13192064948904103,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 66,
                    "variableNameQuality": 0.5416264173783109,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "30004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 21,
                    "commentCount": 77,
                    "variableNameQuality": 0.7207171604248287,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "30005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 95,
                    "commentCount": 92,
                    "variableNameQuality": 0.8211276534541886,
                    "duplicate": [
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 81,
                    "variableNameQuality": 0.29185374948835574,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "30007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 22,
                    "variableNameQuality": 0.7225087018173644,
                    "duplicate": [
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 97,
                    "variableNameQuality": 0.8513234739762187,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 34,
                    "variableNameQuality": 0.1280324125082657,
                    "duplicate": [
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "30010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 78,
                    "variableNameQuality": 0.8675430771540651,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "30011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 35,
                    "variableNameQuality": 0.7939149688286831,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "30012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 47,
                    "variableNameQuality": 0.0540676757349301,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "30013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 11,
                    "variableNameQuality": 0.6170583708106364,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "30014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 89,
                    "commentCount": 10,
                    "variableNameQuality": 0.8813490349067609,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "30015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 20,
                    "variableNameQuality": 0.9868422814244482,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 80,
                    "variableNameQuality": 0.9037004933513517,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 66,
                    "variableNameQuality": 0.04457769894675534,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "30018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 68,
                    "variableNameQuality": 0.9679314965858213,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "30019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 17,
                    "variableNameQuality": 0.6116799236341938,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "30020",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 26,
                    "variableNameQuality": 0.5112268702872407,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "30021",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 95,
                    "commentCount": 87,
                    "variableNameQuality": 0.9657162441907635,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "30022",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 2,
                    "variableNameQuality": 0.934536727214697,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 31,
        "nom": "Kawka",
        "prenom": "Guillermo",
        "dateNaissance": "26/08/1981",
        "lieuNaissance": "Vicq-03",
        "dateEntretien": "3/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "31000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 33,
                    "commentCount": 7,
                    "variableNameQuality": 0.9218120011326341,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "31001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 30,
                    "variableNameQuality": 0.6592892808737364,
                    "duplicate": [
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "31002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 11,
                    "variableNameQuality": 0.9383572168816171,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "31003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 23,
                    "variableNameQuality": 0.5840557674439858,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "31004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 41,
                    "variableNameQuality": 0.4270610348054923,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "31005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 99,
                    "variableNameQuality": 0.07799320822994371,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "31006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 30,
                    "variableNameQuality": 0.5283659801499495,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "31007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 89,
                    "variableNameQuality": 0.2656296761132332,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            },
            {
                "id": "31008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 77,
                    "variableNameQuality": 0.2160895799061947,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 32,
        "nom": "Daboudet",
        "prenom": "Tal",
        "dateNaissance": "26/08/1997",
        "lieuNaissance": "Leurville",
        "dateEntretien": "4/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 33,
        "nom": "Molon",
        "prenom": "Collin",
        "dateNaissance": "18/12/1971",
        "lieuNaissance": "Quetteville",
        "dateEntretien": "22/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "33000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 84,
                    "variableNameQuality": 0.1626498497929032,
                    "duplicate": [
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "33001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 51,
                    "commentCount": 14,
                    "variableNameQuality": 0.27567210597412206,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "33002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 78,
                    "commentCount": 62,
                    "variableNameQuality": 0.7823116045551155,
                    "duplicate": [
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 34,
        "nom": "Verpoorter",
        "prenom": "Edward",
        "dateNaissance": "05/01/1988",
        "lieuNaissance": "Ocana",
        "dateEntretien": "9/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "34000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 9,
                    "commentCount": 34,
                    "variableNameQuality": 0.7232086460805353,
                    "duplicate": [
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "34001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 34,
                    "variableNameQuality": 0.18010896351574768,
                    "duplicate": [
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "34002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 40,
                    "variableNameQuality": 0.5288315275856014,
                    "duplicate": [
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "34003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 10,
                    "variableNameQuality": 0.024983176345033442,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "34004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 19,
                    "variableNameQuality": 0.20548356789064193,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "34005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 78,
                    "commentCount": 57,
                    "variableNameQuality": 0.7523305555478588,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "34006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 82,
                    "variableNameQuality": 0.6108306245165046,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "34007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 71,
                    "variableNameQuality": 0.7123095776707141,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "34008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 47,
                    "commentCount": 64,
                    "variableNameQuality": 0.24181887387530587,
                    "duplicate": [
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "34009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 44,
                    "variableNameQuality": 0.41165218587918406,
                    "duplicate": [
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "34010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 21,
                    "variableNameQuality": 0.14668983246496303,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "34011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 19,
                    "commentCount": 16,
                    "variableNameQuality": 0.35982260001825905,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 35,
        "nom": "Demedeiros",
        "prenom": "Rahim",
        "dateNaissance": "09/03/1972",
        "lieuNaissance": "Verrens-arvey",
        "dateEntretien": "30/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "35000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 30,
                    "variableNameQuality": 0.5685107646789361,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "35001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 65,
                    "variableNameQuality": 0.9874245039507733,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "35002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 78,
                    "variableNameQuality": 0.019999602274183292,
                    "duplicate": [
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "35003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 86,
                    "variableNameQuality": 0.37887210184930287,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "35004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 52,
                    "commentCount": 31,
                    "variableNameQuality": 0.6606176092795311,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "35005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 46,
                    "variableNameQuality": 0.9244629038645646,
                    "duplicate": [
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "35006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 65,
                    "variableNameQuality": 0.34631567636862126,
                    "duplicate": [
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "35007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 10,
                    "variableNameQuality": 0.12117441231709236,
                    "duplicate": [
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 7,
                    "commentCount": 7,
                    "variableNameQuality": 0.9656190354446965,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "35009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 88,
                    "variableNameQuality": 0.49349586441539495,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 90,
                    "variableNameQuality": 0.9428310813132493,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "35011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 4,
                    "variableNameQuality": 0.8907395926525259,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "35012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 32,
                    "variableNameQuality": 0.5478308815849612,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 0,
                    "variableNameQuality": 0.7725203052570625,
                    "duplicate": [
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "35014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 62,
                    "variableNameQuality": 0.5735059896438446,
                    "duplicate": [
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "35015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 50,
                    "variableNameQuality": 0.8962493052549272,
                    "duplicate": [
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "35016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 52,
                    "variableNameQuality": 0.767081003639774,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "35017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 67,
                    "variableNameQuality": 0.6242028036988962,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 9,
                    "commentCount": 84,
                    "variableNameQuality": 0.3672305045441102,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "35019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 44,
                    "variableNameQuality": 0.40470784324652,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "35020",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 3,
                    "variableNameQuality": 0.08665757874788071,
                    "duplicate": [
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "35021",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 67,
                    "variableNameQuality": 0.4117992306398405,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35022",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 42,
                    "variableNameQuality": 0.33400794225704245,
                    "duplicate": [
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "35023",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 50,
                    "commentCount": 74,
                    "variableNameQuality": 0.7255329435556309,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35024",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 11,
                    "commentCount": 83,
                    "variableNameQuality": 0.39602438380878957,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "35025",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 78,
                    "variableNameQuality": 0.07128064416226676,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "35026",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 92,
                    "variableNameQuality": 0.6273622828112942,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "35027",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 89,
                    "variableNameQuality": 0.25001874451400274,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 36,
        "nom": "Trojak",
        "prenom": "Vien",
        "dateNaissance": "04/07/1976",
        "lieuNaissance": "Ciel",
        "dateEntretien": "17/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "36000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 100,
                    "commentCount": 94,
                    "variableNameQuality": 0.6105036548328139,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "36001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 12,
                    "variableNameQuality": 0.4673979471576335,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 37,
        "nom": "Saley",
        "prenom": "Fernando",
        "dateNaissance": "05/08/1982",
        "lieuNaissance": "Pont-saint-mard",
        "dateEntretien": "1/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "37000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 90,
                    "commentCount": 26,
                    "variableNameQuality": 0.027248035712625684,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "37001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 31,
                    "commentCount": 61,
                    "variableNameQuality": 0.6175502001829368,
                    "duplicate": [
                        {
                            "id": 9,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 38,
        "nom": "Habon",
        "prenom": "Parvati",
        "dateNaissance": "11/07/1984",
        "lieuNaissance": "Veurdre",
        "dateEntretien": "8/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "38000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 61,
                    "variableNameQuality": 0.6917515784751758,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "38001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 29,
                    "commentCount": 5,
                    "variableNameQuality": 0.5430329635513571,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "38002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 37,
                    "variableNameQuality": 0.8574097645622364,
                    "duplicate": [
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "38003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 27,
                    "commentCount": 27,
                    "variableNameQuality": 0.6508590332670102,
                    "duplicate": [
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "38004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 37,
                    "variableNameQuality": 0.6216727273280443,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "38005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 13,
                    "variableNameQuality": 0.21284438572842967,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "38006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 38,
                    "variableNameQuality": 0.5715585015846196,
                    "duplicate": [
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "38007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 27,
                    "variableNameQuality": 0.5935003174039933,
                    "duplicate": [
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 39,
        "nom": "Moualek",
        "prenom": "Baldur",
        "dateNaissance": "15/02/1986",
        "lieuNaissance": "Vigneux-de-bretagne",
        "dateEntretien": "21/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "39000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 28,
                    "variableNameQuality": 0.139420300354695,
                    "duplicate": [
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "39001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 55,
                    "variableNameQuality": 0.34409766893231886,
                    "duplicate": [
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "39002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 58,
                    "variableNameQuality": 0.9020384725435197,
                    "duplicate": [
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "39003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 68,
                    "variableNameQuality": 0.1572561615017457,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "39004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 21,
                    "variableNameQuality": 0.8020557985487295,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "39005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 98,
                    "variableNameQuality": 0.9340839650237042,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "39006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 45,
                    "variableNameQuality": 0.05041588241838646,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 40,
        "nom": "Barayre",
        "prenom": "Perpetua",
        "dateNaissance": "18/10/1991",
        "lieuNaissance": "Bezeril",
        "dateEntretien": "19/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "40000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 51,
                    "variableNameQuality": 0.13358361999086243,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "40001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 6,
                    "variableNameQuality": 0.7837638392263272,
                    "duplicate": [
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "40002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 94,
                    "variableNameQuality": 0.34064506777358394,
                    "duplicate": [
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "40003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 46,
                    "variableNameQuality": 0.47447779045091465,
                    "duplicate": [
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "40004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 8,
                    "variableNameQuality": 0.3304970644736407,
                    "duplicate": [
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "40005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 97,
                    "variableNameQuality": 0.6855659107974765,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "40006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 82,
                    "variableNameQuality": 0.064362709895466,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "40007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 41,
                    "variableNameQuality": 0.3614287525982305,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "40008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 59,
                    "variableNameQuality": 0.5010296731746652,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 41,
        "nom": "Enche",
        "prenom": "Valerius",
        "dateNaissance": "25/03/1970",
        "lieuNaissance": "Sebrazac",
        "dateEntretien": "28/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "41000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 68,
                    "variableNameQuality": 0.4204914373158193,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "41001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 45,
                    "variableNameQuality": 0.21155992797831447,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "41002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 3,
                    "variableNameQuality": 0.3025008825082651,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "41003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 82,
                    "variableNameQuality": 0.27275441729505945,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "41004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 73,
                    "variableNameQuality": 0.7666955556467873,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "41005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 12,
                    "variableNameQuality": 0.8149295296009036,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "41006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 40,
                    "variableNameQuality": 0.9599043733713636,
                    "duplicate": [
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "41007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 48,
                    "commentCount": 52,
                    "variableNameQuality": 0.6042207971367219,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "41008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 91,
                    "variableNameQuality": 0.5944846536726106,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "41009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 66,
                    "variableNameQuality": 0.9450726247080244,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 42,
        "nom": "Lasnaveres",
        "prenom": "Bevin",
        "dateNaissance": "10/09/1984",
        "lieuNaissance": "Amance-54",
        "dateEntretien": "11/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "42000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 50,
                    "commentCount": 25,
                    "variableNameQuality": 0.0734072489908496,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "42001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 8,
                    "variableNameQuality": 0.6243245350865744,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "42002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 87,
                    "variableNameQuality": 0.2252583526548727,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "42003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 85,
                    "variableNameQuality": 0.6525435329362994,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "42004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 21,
                    "commentCount": 87,
                    "variableNameQuality": 0.9226259292352287,
                    "duplicate": [
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 43,
        "nom": "Lefai",
        "prenom": "Lindsay",
        "dateNaissance": "29/08/1998",
        "lieuNaissance": "Classun",
        "dateEntretien": "13/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "43000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 28,
                    "variableNameQuality": 0.027763381135438525,
                    "duplicate": [
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "43001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 81,
                    "commentCount": 62,
                    "variableNameQuality": 0.17063045090023243,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "43002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 88,
                    "variableNameQuality": 0.9336138874663321,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 44,
        "nom": "Birarda",
        "prenom": "Giulio",
        "dateNaissance": "24/03/1977",
        "lieuNaissance": "Bernos-beaulac",
        "dateEntretien": "16/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "44000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 11,
                    "commentCount": 87,
                    "variableNameQuality": 0.5064241182671334,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "44001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 16,
                    "variableNameQuality": 0.7666394151082779,
                    "duplicate": [
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "44002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 51,
                    "commentCount": 7,
                    "variableNameQuality": 0.3765936251467309,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "44003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 2,
                    "variableNameQuality": 0.9166265581825331,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "44004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 51,
                    "variableNameQuality": 0.6057126172013311,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "44005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 89,
                    "variableNameQuality": 0.11304850166632996,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "44006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 27,
                    "commentCount": 37,
                    "variableNameQuality": 0.2402129931625807,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "44007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 87,
                    "variableNameQuality": 0.6758179780419113,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 45,
        "nom": "Ammari",
        "prenom": "Gabriel",
        "dateNaissance": "23/01/1997",
        "lieuNaissance": "Certines",
        "dateEntretien": "26/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "45000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 1,
                    "variableNameQuality": 0.677889094922064,
                    "duplicate": [
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 46,
        "nom": "Carriez",
        "prenom": "Girolamo",
        "dateNaissance": "16/11/1986",
        "lieuNaissance": "Saint-aubin-62",
        "dateEntretien": "10/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "46000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 3,
                    "commentCount": 16,
                    "variableNameQuality": 0.21455942066315792,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "46001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 27,
                    "variableNameQuality": 0.6077209924854449,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "46002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 40,
                    "variableNameQuality": 0.6732124867664739,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "46003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 69,
                    "variableNameQuality": 0.8655214905505936,
                    "duplicate": [
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "46004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 79,
                    "variableNameQuality": 0.005956620496322396,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "46005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 96,
                    "variableNameQuality": 0.5355021214210854,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "46006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 68,
                    "variableNameQuality": 0.3170697995582443,
                    "duplicate": [
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "46007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 57,
                    "variableNameQuality": 0.5734182846404767,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "46008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 34,
                    "variableNameQuality": 0.21107749515073904,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "46009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 24,
                    "variableNameQuality": 0.4150635426651106,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "46010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 60,
                    "commentCount": 46,
                    "variableNameQuality": 0.05323900288137129,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 47,
        "nom": "Moutault",
        "prenom": "Miki",
        "dateNaissance": "19/02/1984",
        "lieuNaissance": "Neuilly-sur-suize",
        "dateEntretien": "24/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "47000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 26,
                    "variableNameQuality": 0.17017071383377458,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "47001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 96,
                    "variableNameQuality": 0.2691737135442248,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "47002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 80,
                    "variableNameQuality": 0.8484614066302634,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "47003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 14,
                    "variableNameQuality": 0.5475618754994113,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "47004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 69,
                    "variableNameQuality": 0.04031718231184345,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "47005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 70,
                    "variableNameQuality": 0.048741379932827344,
                    "duplicate": [
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            },
            {
                "id": "47006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 35,
                    "variableNameQuality": 0.44897019677531247,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 48,
        "nom": "Rouxhet",
        "prenom": "Willis",
        "dateNaissance": "30/09/1997",
        "lieuNaissance": "Rupt-sur-moselle",
        "dateEntretien": "25/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "48000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 71,
                    "commentCount": 41,
                    "variableNameQuality": 0.5226884311779871,
                    "duplicate": [
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "48001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 19,
                    "commentCount": 0,
                    "variableNameQuality": 0.2616706002996928,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "48002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 53,
                    "variableNameQuality": 0.7585929929215309,
                    "duplicate": [
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "48003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 16,
                    "variableNameQuality": 0.7322448869768073,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "48004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 34,
                    "variableNameQuality": 0.5006058660963791,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "48005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 31,
                    "variableNameQuality": 0.7932927659196796,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "48006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 49,
                    "commentCount": 60,
                    "variableNameQuality": 0.08418786344411422,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 68,
                    "variableNameQuality": 0.4036133779776966,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 19,
                    "variableNameQuality": 0.031192234712331013,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "48009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 81,
                    "variableNameQuality": 0.36389404254178137,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 88,
                    "variableNameQuality": 0.529926873686672,
                    "duplicate": [
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 58,
                    "commentCount": 18,
                    "variableNameQuality": 0.7927261218469187,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 30,
                    "variableNameQuality": 0.33090817402665873,
                    "duplicate": [
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 4,
                    "variableNameQuality": 0.7732008348925656,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "48014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 25,
                    "variableNameQuality": 0.1995853475623065,
                    "duplicate": [
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 62,
                    "variableNameQuality": 0.016545240429437946,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "48016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 48,
                    "variableNameQuality": 0.7338575010344791,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            },
            {
                "id": "48017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 6,
                    "variableNameQuality": 0.9525826434629163,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "48018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 92,
                    "variableNameQuality": 0.13838954064884978,
                    "duplicate": [
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            },
            {
                "id": "48019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 5,
                    "commentCount": 99,
                    "variableNameQuality": 0.15413260679054663,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 49,
        "nom": "Fugain",
        "prenom": "Tucker",
        "dateNaissance": "21/02/1998",
        "lieuNaissance": "Coulonge",
        "dateEntretien": "29/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 50,
        "nom": "Golinelli",
        "prenom": "Forrest",
        "dateNaissance": "31/07/1994",
        "lieuNaissance": "Vilsberg",
        "dateEntretien": "4/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "50000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 93,
                    "commentCount": 45,
                    "variableNameQuality": 0.5955649506663925,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "50001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 30,
                    "variableNameQuality": 0.7062749652792605,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "50002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 5,
                    "variableNameQuality": 0.8687818246415515,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "50003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 92,
                    "variableNameQuality": 0.808022966204481,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "50004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 62,
                    "variableNameQuality": 0.7083833268426907,
                    "duplicate": [
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "50005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 75,
                    "variableNameQuality": 0.6671580147614478,
                    "duplicate": [
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "50006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 39,
                    "variableNameQuality": 0.7970702835887055,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "50007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 18,
                    "variableNameQuality": 0.11535044408255102,
                    "duplicate": [
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "50008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 81,
                    "variableNameQuality": 0.6609909011301167,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "50009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 25,
                    "variableNameQuality": 0.4354749253485105,
                    "duplicate": [
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 51,
        "nom": "Staudt",
        "prenom": "Carter",
        "dateNaissance": "05/07/1986",
        "lieuNaissance": "Maleville",
        "dateEntretien": "17/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "51000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 14,
                    "variableNameQuality": 0.9377020748089849,
                    "duplicate": [
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "51001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 29,
                    "variableNameQuality": 0.6744420446317064,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "51002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 87,
                    "variableNameQuality": 0.4151763360798094,
                    "duplicate": [
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "51003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 13,
                    "variableNameQuality": 0.8153384828915744,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "51004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 73,
                    "variableNameQuality": 0.7230135867409302,
                    "duplicate": [
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "51005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 19,
                    "variableNameQuality": 0.8420761068031939,
                    "duplicate": [
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "51006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 17,
                    "variableNameQuality": 0.3679335865300337,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "51007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 48,
                    "commentCount": 99,
                    "variableNameQuality": 0.73913021811514,
                    "duplicate": [
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 52,
        "nom": "Nathie",
        "prenom": "Curt",
        "dateNaissance": "27/04/1989",
        "lieuNaissance": "Meslan",
        "dateEntretien": "10/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "52000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 51,
                    "variableNameQuality": 0.06176635725205515,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "52001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 12,
                    "variableNameQuality": 0.8932076117315991,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "52002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 81,
                    "commentCount": 33,
                    "variableNameQuality": 0.14665165777671807,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "52003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 78,
                    "variableNameQuality": 0.3697663408112495,
                    "duplicate": [
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "52004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 95,
                    "commentCount": 76,
                    "variableNameQuality": 0.7629498234598758,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "52005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 35,
                    "variableNameQuality": 0.6972176409605073,
                    "duplicate": [
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "52006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 16,
                    "variableNameQuality": 0.6868039905150924,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "52007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 41,
                    "commentCount": 8,
                    "variableNameQuality": 0.03975272498322546,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "52008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 9,
                    "commentCount": 65,
                    "variableNameQuality": 0.7448810401250667,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "52009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 11,
                    "commentCount": 92,
                    "variableNameQuality": 0.852982110600057,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "52010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 3,
                    "commentCount": 54,
                    "variableNameQuality": 0.8775962609435501,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "52011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 20,
                    "commentCount": 30,
                    "variableNameQuality": 0.4334043277734979,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 53,
        "nom": "Lepoittevin",
        "prenom": "Merv",
        "dateNaissance": "23/12/1980",
        "lieuNaissance": "Maurens-scopont",
        "dateEntretien": "13/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "53000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 43,
                    "variableNameQuality": 0.4880788882903292,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 54,
        "nom": "Merx",
        "prenom": "Connell",
        "dateNaissance": "29/05/1997",
        "lieuNaissance": "Gu\u00eetres",
        "dateEntretien": "6/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "54000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 26,
                    "variableNameQuality": 0.27550165949937533,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "54001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 64,
                    "variableNameQuality": 0.3071913409198419,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "54002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 86,
                    "variableNameQuality": 0.4317276469464001,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "54003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 27,
                    "commentCount": 93,
                    "variableNameQuality": 0.01899855734938738,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "54004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 92,
                    "variableNameQuality": 0.29201787938636803,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "54005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 49,
                    "commentCount": 41,
                    "variableNameQuality": 0.8534458432890123,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "54006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 89,
                    "commentCount": 73,
                    "variableNameQuality": 0.46471206763839035,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "54007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 30,
                    "commentCount": 66,
                    "variableNameQuality": 0.43597296062047863,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "54008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 66,
                    "variableNameQuality": 0.6402081678706448,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "54009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 79,
                    "commentCount": 32,
                    "variableNameQuality": 0.4408389090689575,
                    "duplicate": [
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 55,
        "nom": "Toujas",
        "prenom": "Hortense",
        "dateNaissance": "30/07/1996",
        "lieuNaissance": "Orliac",
        "dateEntretien": "14/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "55000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 11,
                    "variableNameQuality": 0.17310228334148703,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "55001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 79,
                    "commentCount": 71,
                    "variableNameQuality": 0.8313108594762959,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "55002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 24,
                    "variableNameQuality": 0.7913685489617733,
                    "duplicate": [
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 56,
        "nom": "Teytau",
        "prenom": "Cade",
        "dateNaissance": "21/01/1996",
        "lieuNaissance": "Couloume-mondebat",
        "dateEntretien": "3/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "56000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 8,
                    "variableNameQuality": 0.9692539060693572,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "56001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 69,
                    "variableNameQuality": 0.9278082566096881,
                    "duplicate": [
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "56002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 28,
                    "variableNameQuality": 0.6576362509206897,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "56003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 60,
                    "commentCount": 69,
                    "variableNameQuality": 0.2553368424753897,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "56004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 90,
                    "commentCount": 50,
                    "variableNameQuality": 0.6472600316499513,
                    "duplicate": [
                        {
                            "id": 9,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "56005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 57,
                    "variableNameQuality": 0.2613887456155384,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            },
            {
                "id": "56006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 4,
                    "variableNameQuality": 0.8630489476657013,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "56007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 22,
                    "variableNameQuality": 0.8591810813500517,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "56008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 94,
                    "variableNameQuality": 0.614158216357719,
                    "duplicate": [
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            },
            {
                "id": "56009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 63,
                    "variableNameQuality": 0.4668754892731566,
                    "duplicate": [
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "56010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 48,
                    "commentCount": 51,
                    "variableNameQuality": 0.4125495995541558,
                    "duplicate": [
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "56011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 96,
                    "variableNameQuality": 0.872150502210782,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "56012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 81,
                    "variableNameQuality": 0.7240649406775654,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "56013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 18,
                    "variableNameQuality": 0.5315289453755503,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 57,
        "nom": "Durrheimer",
        "prenom": "Carmela",
        "dateNaissance": "24/10/1991",
        "lieuNaissance": "Concarneau",
        "dateEntretien": "5/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "57000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 90,
                    "variableNameQuality": 0.17044286496715344,
                    "duplicate": [
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "57001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 18,
                    "variableNameQuality": 0.6891011959264095,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "57002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 32,
                    "variableNameQuality": 0.2221728961225653,
                    "duplicate": [
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "57003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 59,
                    "variableNameQuality": 0.9156168119001631,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "57004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 78,
                    "commentCount": 33,
                    "variableNameQuality": 0.6851024935795769,
                    "duplicate": [
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "57005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 56,
                    "variableNameQuality": 0.759232446305618,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "57006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 84,
                    "variableNameQuality": 0.1869162726951169,
                    "duplicate": [
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 58,
        "nom": "Wildemann",
        "prenom": "Mohamed",
        "dateNaissance": "14/11/1989",
        "lieuNaissance": "Chartuzac",
        "dateEntretien": "1/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 59,
        "nom": "Corbisiero",
        "prenom": "Yen",
        "dateNaissance": "27/12/1986",
        "lieuNaissance": "Rantigny",
        "dateEntretien": "12/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "59000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 25,
                    "variableNameQuality": 0.5622684697631117,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "59001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 66,
                    "commentCount": 44,
                    "variableNameQuality": 0.7319466216083872,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "59002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 95,
                    "variableNameQuality": 0.6575133892845626,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "59003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 26,
                    "variableNameQuality": 0.31826841022673136,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "59004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 71,
                    "variableNameQuality": 0.05531160826367454,
                    "duplicate": [
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "59005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 29,
                    "variableNameQuality": 0.4059454098130244,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "59006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 49,
                    "variableNameQuality": 0.4372254077394634,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "59007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 84,
                    "variableNameQuality": 0.29019464306714493,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "59008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 96,
                    "variableNameQuality": 0.34753043094689806,
                    "duplicate": [
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "59009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 100,
                    "commentCount": 6,
                    "variableNameQuality": 0.7697324547416782,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "59010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 31,
                    "commentCount": 82,
                    "variableNameQuality": 0.9897176320977422,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "59011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 41,
                    "variableNameQuality": 0.395789288564633,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "59012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 42,
                    "variableNameQuality": 0.7107404199304483,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "59013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 22,
                    "variableNameQuality": 0.14370588975862864,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "59014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 28,
                    "variableNameQuality": 0.6560211095758158,
                    "duplicate": [
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "59015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 13,
                    "variableNameQuality": 0.10598295729513296,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "59016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 10,
                    "commentCount": 86,
                    "variableNameQuality": 0.9549335849079925,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "59017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 11,
                    "commentCount": 19,
                    "variableNameQuality": 0.8270467595987918,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 60,
        "nom": "Abdeljelil",
        "prenom": "Philippe",
        "dateNaissance": "03/02/1977",
        "lieuNaissance": "Bournois",
        "dateEntretien": "8/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "60000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 78,
                    "variableNameQuality": 0.33324650006471257,
                    "duplicate": [
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "60001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 93,
                    "commentCount": 9,
                    "variableNameQuality": 0.7018621566987514,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "60002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 27,
                    "commentCount": 79,
                    "variableNameQuality": 0.03926888413676277,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "60003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 79,
                    "variableNameQuality": 0.2565199878361206,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "60004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 61,
                    "commentCount": 80,
                    "variableNameQuality": 0.025614302969391378,
                    "duplicate": [
                        {
                            "id": 40,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "60005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 38,
                    "variableNameQuality": 0.09861829982158965,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "60006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 5,
                    "variableNameQuality": 0.7835511022247357,
                    "duplicate": [
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 61,
        "nom": "Gobarden",
        "prenom": "Sela",
        "dateNaissance": "02/08/1974",
        "lieuNaissance": "Munster-68",
        "dateEntretien": "14/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "61000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 68,
                    "variableNameQuality": 0.694215473459222,
                    "duplicate": [
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "61001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 93,
                    "commentCount": 77,
                    "variableNameQuality": 0.3832448883160757,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 62,
        "nom": "Renkin",
        "prenom": "Camillo",
        "dateNaissance": "14/02/1979",
        "lieuNaissance": "Barville-88",
        "dateEntretien": "19/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "62000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 19,
                    "variableNameQuality": 0.26325411473901006,
                    "duplicate": [
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "62001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 18,
                    "variableNameQuality": 0.9085142923475467,
                    "duplicate": [
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "62002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 100,
                    "commentCount": 3,
                    "variableNameQuality": 0.7423435116380628,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "62003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 63,
                    "variableNameQuality": 0.848340677766441,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "62004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 38,
                    "variableNameQuality": 0.1876432349400431,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "62005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 83,
                    "variableNameQuality": 0.5278273860589822,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "62006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 85,
                    "variableNameQuality": 0.5452551174067878,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "62007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 91,
                    "variableNameQuality": 0.18513218452269364,
                    "duplicate": [
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "62008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 95,
                    "commentCount": 100,
                    "variableNameQuality": 0.14322338471504115,
                    "duplicate": [
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "62009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 86,
                    "variableNameQuality": 0.2724483340519619,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "62010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 19,
                    "commentCount": 57,
                    "variableNameQuality": 0.8950005833292034,
                    "duplicate": [
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "62011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 30,
                    "variableNameQuality": 0.35811605805790936,
                    "duplicate": [
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "62012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 41,
                    "commentCount": 69,
                    "variableNameQuality": 0.3676858848495129,
                    "duplicate": [
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "62013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 6,
                    "variableNameQuality": 0.38449341484494115,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "62014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 24,
                    "commentCount": 54,
                    "variableNameQuality": 0.8761558331496212,
                    "duplicate": [
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "62015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 46,
                    "commentCount": 19,
                    "variableNameQuality": 0.9358965048843583,
                    "duplicate": [
                        {
                            "id": 68,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "62016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 45,
                    "variableNameQuality": 0.9095274711134542,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "62017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 74,
                    "commentCount": 100,
                    "variableNameQuality": 0.5935084336327269,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "62018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 37,
                    "commentCount": 4,
                    "variableNameQuality": 0.3136087286513233,
                    "duplicate": [
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "62019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 43,
                    "variableNameQuality": 0.23540933486790094,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 63,
        "nom": "Serir",
        "prenom": "Arn",
        "dateNaissance": "29/12/1971",
        "lieuNaissance": "Saint-utin",
        "dateEntretien": "2/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "63000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 8,
                    "commentCount": 75,
                    "variableNameQuality": 0.6625957783973507,
                    "duplicate": [
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "63001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 62,
                    "commentCount": 41,
                    "variableNameQuality": 0.34306247330056705,
                    "duplicate": [
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            },
            {
                "id": "63002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 27,
                    "variableNameQuality": 0.34394009685246063,
                    "duplicate": [
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/09/2018"
                }
            },
            {
                "id": "63003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 12,
                    "variableNameQuality": 0.3787815933484512,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "63004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 96,
                    "variableNameQuality": 0.9720202193597433,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 64,
        "nom": "Tinon",
        "prenom": "Napoleon",
        "dateNaissance": "10/06/1997",
        "lieuNaissance": "Galgan",
        "dateEntretien": "3/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "64000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 43,
                    "variableNameQuality": 0.6013620869153887,
                    "duplicate": [
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "64001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 24,
                    "variableNameQuality": 0.28407614383792323,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 65,
        "nom": "Fouillee",
        "prenom": "Nunzia",
        "dateNaissance": "02/01/1978",
        "lieuNaissance": "Tribehou",
        "dateEntretien": "30/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "65000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 91,
                    "variableNameQuality": 0.32852820286539686,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "65001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 63,
                    "commentCount": 81,
                    "variableNameQuality": 0.2593696242722494,
                    "duplicate": [
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "65002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 57,
                    "commentCount": 79,
                    "variableNameQuality": 0.15298865031117492,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "65003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 82,
                    "variableNameQuality": 0.32510610994817957,
                    "duplicate": [
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/10/2018"
                }
            },
            {
                "id": "65004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 61,
                    "variableNameQuality": 0.0017020337784190431,
                    "duplicate": [
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "65005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 90,
                    "commentCount": 81,
                    "variableNameQuality": 0.9951624603524047,
                    "duplicate": [
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "65006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 85,
                    "variableNameQuality": 0.7374085503297061,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "65007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 86,
                    "variableNameQuality": 0.336355027631992,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "65008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 69,
                    "variableNameQuality": 0.14267261247849572,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "65009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 19,
                    "variableNameQuality": 0.1804837204902896,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 66,
        "nom": "Catheland",
        "prenom": "Basil",
        "dateNaissance": "01/04/1998",
        "lieuNaissance": "Saint-pierre-de-bailleul",
        "dateEntretien": "28/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "66000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 26,
                    "variableNameQuality": 0.8820592597505696,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "66001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 78,
                    "commentCount": 4,
                    "variableNameQuality": 0.02316727352734005,
                    "duplicate": [
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "66002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 21,
                    "variableNameQuality": 0.8868673487040736,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 67,
        "nom": "Chialvo",
        "prenom": "Nikon",
        "dateNaissance": "12/08/1986",
        "lieuNaissance": "Haumont-pres-samogneux",
        "dateEntretien": "23/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 68,
        "nom": "Osiecki",
        "prenom": "Moa",
        "dateNaissance": "15/05/1990",
        "lieuNaissance": "Mauron",
        "dateEntretien": "30/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "68000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 89,
                    "commentCount": 77,
                    "variableNameQuality": 0.6218499347853018,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "68001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 8,
                    "variableNameQuality": 0.01636778171733544,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "68002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 29,
                    "commentCount": 97,
                    "variableNameQuality": 0.15407806748967,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "68003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 84,
                    "commentCount": 87,
                    "variableNameQuality": 0.8591207687304306,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "4/10/2018"
                }
            },
            {
                "id": "68004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 16,
                    "variableNameQuality": 0.90817787823447,
                    "duplicate": [
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "68005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 10,
                    "variableNameQuality": 0.19855127495875025,
                    "duplicate": [
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 69,
        "nom": "Valcalda",
        "prenom": "Elder",
        "dateNaissance": "07/07/1973",
        "lieuNaissance": "Annepont",
        "dateEntretien": "20/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "69000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 47,
                    "variableNameQuality": 0.07542961601207998,
                    "duplicate": [
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 70,
        "nom": "Gleise",
        "prenom": "Donatien",
        "dateNaissance": "12/11/1991",
        "lieuNaissance": "Villefranche-le-chateau",
        "dateEntretien": "11/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "70000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 20,
                    "variableNameQuality": 0.09718156046980542,
                    "duplicate": [
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 71,
        "nom": "Hassel",
        "prenom": "Carroll",
        "dateNaissance": "01/03/1971",
        "lieuNaissance": "Eragny-sur-epte",
        "dateEntretien": "28/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "71000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 72,
                    "variableNameQuality": 0.7028173139587888,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "71001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 68,
                    "variableNameQuality": 0.30695166395429396,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "71002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 27,
                    "variableNameQuality": 0.5403581697403315,
                    "duplicate": [
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "71003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 1,
                    "commentCount": 25,
                    "variableNameQuality": 0.9412165571705349,
                    "duplicate": [
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "71004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 17,
                    "variableNameQuality": 0.46241056104002143,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "71005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 5,
                    "commentCount": 9,
                    "variableNameQuality": 0.5199338796213425,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "71006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 53,
                    "commentCount": 32,
                    "variableNameQuality": 0.00771923681497777,
                    "duplicate": [
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "71007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 81,
                    "variableNameQuality": 0.34709060912183376,
                    "duplicate": [
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "71008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 16,
                    "commentCount": 83,
                    "variableNameQuality": 0.08130125655186526,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "71009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 48,
                    "commentCount": 88,
                    "variableNameQuality": 0.036299061127026744,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "71010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 60,
                    "variableNameQuality": 0.5288594531048981,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "71011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 28,
                    "variableNameQuality": 0.3874623880994036,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "71012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 27,
                    "variableNameQuality": 0.3242953981811184,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "71013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 47,
                    "commentCount": 52,
                    "variableNameQuality": 0.7034443819595757,
                    "duplicate": [
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "71014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 31,
                    "variableNameQuality": 0.8436813198927654,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "71015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 90,
                    "variableNameQuality": 0.8621221344859129,
                    "duplicate": [
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "71016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 90,
                    "commentCount": 76,
                    "variableNameQuality": 0.1094339088934243,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "71017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 46,
                    "commentCount": 81,
                    "variableNameQuality": 0.7102792200932301,
                    "duplicate": [
                        {
                            "id": 56,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "71018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 81,
                    "commentCount": 25,
                    "variableNameQuality": 0.6362960500249096,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "71019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 72,
                    "variableNameQuality": 0.7012705241911504,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 72,
        "nom": "Creuzard",
        "prenom": "Demetrios",
        "dateNaissance": "03/09/1976",
        "lieuNaissance": "Malbrans",
        "dateEntretien": "10/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "72000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 9,
                    "variableNameQuality": 0.4194145125552837,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "72001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 98,
                    "variableNameQuality": 0.6083717888142216,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "72002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 46,
                    "variableNameQuality": 0.19846694354098127,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "72003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 19,
                    "variableNameQuality": 0.6495517213758519,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "72004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 95,
                    "variableNameQuality": 0.6998094813791479,
                    "duplicate": [
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "72005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 52,
                    "commentCount": 21,
                    "variableNameQuality": 0.020403689476027886,
                    "duplicate": [
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "72006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 90,
                    "variableNameQuality": 0.7970471160209739,
                    "duplicate": [
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "72007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 23,
                    "variableNameQuality": 0.7423054085219455,
                    "duplicate": [
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "72008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 71,
                    "commentCount": 9,
                    "variableNameQuality": 0.49340488084460243,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 73,
        "nom": "Ninoreille",
        "prenom": "Ridley",
        "dateNaissance": "29/09/1976",
        "lieuNaissance": "Serris",
        "dateEntretien": "26/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "73000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 10,
                    "commentCount": 81,
                    "variableNameQuality": 0.48460387290305607,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "73001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 65,
                    "variableNameQuality": 0.8753666665009748,
                    "duplicate": [
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "73002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 25,
                    "commentCount": 10,
                    "variableNameQuality": 0.4744499363268967,
                    "duplicate": [
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "73003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 90,
                    "variableNameQuality": 0.4368833846721042,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 74,
        "nom": "Dinquer",
        "prenom": "Lyra",
        "dateNaissance": "25/01/1972",
        "lieuNaissance": "Salles-79",
        "dateEntretien": "12/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "74000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 78,
                    "variableNameQuality": 0.5079202223818656,
                    "duplicate": [
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "74001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 32,
                    "variableNameQuality": 0.5278221647669644,
                    "duplicate": [
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "74002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 85,
                    "variableNameQuality": 0.7494488469376344,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "74003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 97,
                    "variableNameQuality": 0.250313987336349,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "74004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 57,
                    "variableNameQuality": 0.22775137318462746,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "74005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 94,
                    "variableNameQuality": 0.5360357423591201,
                    "duplicate": [
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "74006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 29,
                    "variableNameQuality": 0.048646699101485,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 75,
        "nom": "Bouas",
        "prenom": "Ina",
        "dateNaissance": "12/10/1991",
        "lieuNaissance": "Versailles",
        "dateEntretien": "19/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 76,
        "nom": "Arzoumanian",
        "prenom": "Susana",
        "dateNaissance": "27/03/1978",
        "lieuNaissance": "Canisy",
        "dateEntretien": "8/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 77,
        "nom": "Szymansky",
        "prenom": "Maxim",
        "dateNaissance": "02/01/1982",
        "lieuNaissance": "Treux",
        "dateEntretien": "17/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "77000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 8,
                    "variableNameQuality": 0.8463531010482209,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "22/09/2018"
                }
            },
            {
                "id": "77001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 29,
                    "variableNameQuality": 0.53475792703658,
                    "duplicate": [
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "77002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 86,
                    "variableNameQuality": 0.12172725166122578,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "77003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 94,
                    "variableNameQuality": 0.2086068373944724,
                    "duplicate": [
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "77004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 15,
                    "commentCount": 96,
                    "variableNameQuality": 0.44919803604712094,
                    "duplicate": [
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "77005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 0,
                    "commentCount": 9,
                    "variableNameQuality": 0.3788807571964429,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "77006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 11,
                    "commentCount": 79,
                    "variableNameQuality": 0.5975642919407279,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "77007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 58,
                    "variableNameQuality": 0.9229218052482117,
                    "duplicate": [
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "77008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 33,
                    "commentCount": 96,
                    "variableNameQuality": 0.5315434097421045,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "77009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 58,
                    "variableNameQuality": 0.22043803873909174,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "77010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 75,
                    "variableNameQuality": 0.8321138652355652,
                    "duplicate": [
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 78,
        "nom": "Marguin",
        "prenom": "Novia",
        "dateNaissance": "15/09/1990",
        "lieuNaissance": "Couches",
        "dateEntretien": "1/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 79,
        "nom": "Iffer",
        "prenom": "Macy",
        "dateNaissance": "27/01/1996",
        "lieuNaissance": "Marcei",
        "dateEntretien": "21/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "79000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 32,
                    "variableNameQuality": 0.8509451236242759,
                    "duplicate": [
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "25/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 80,
        "nom": "Talmant",
        "prenom": "Kennedy",
        "dateNaissance": "22/05/1988",
        "lieuNaissance": "Cagnac-les-mines",
        "dateEntretien": "14/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "80000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 48,
                    "variableNameQuality": 0.9173713703254008,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "80001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 93,
                    "variableNameQuality": 0.3534104531617832,
                    "duplicate": [
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "80002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 50,
                    "commentCount": 67,
                    "variableNameQuality": 0.8564655844321799,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "80003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 71,
                    "variableNameQuality": 0.4701176010586181,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "80004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 19,
                    "commentCount": 18,
                    "variableNameQuality": 0.2463426177601693,
                    "duplicate": [
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 81,
        "nom": "Faubladier",
        "prenom": "Ravi",
        "dateNaissance": "12/12/1986",
        "lieuNaissance": "Laboutarie",
        "dateEntretien": "5/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "81000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 17,
                    "commentCount": 71,
                    "variableNameQuality": 0.5333815276623709,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "81001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 8,
                    "commentCount": 30,
                    "variableNameQuality": 0.7531917884277215,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "81002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 46,
                    "commentCount": 36,
                    "variableNameQuality": 0.38807906837383466,
                    "duplicate": [
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "81003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 30,
                    "variableNameQuality": 0.38508217869212924,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "5/09/2018"
                }
            },
            {
                "id": "81004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 0,
                    "commentCount": 30,
                    "variableNameQuality": 0.7012826201293536,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "81005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 13,
                    "variableNameQuality": 0.3535944007259624,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "81006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 85,
                    "commentCount": 79,
                    "variableNameQuality": 0.8761891232916893,
                    "duplicate": [
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "8/09/2018"
                }
            },
            {
                "id": "81007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 55,
                    "variableNameQuality": 0.8884358851838037,
                    "duplicate": [
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "81008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 63,
                    "variableNameQuality": 0.5226228752587065,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "81009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 68,
                    "variableNameQuality": 0.2760125436420835,
                    "duplicate": [
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "81010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 17,
                    "variableNameQuality": 0.609409658089084,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 82,
        "nom": "Massotte",
        "prenom": "Peyton",
        "dateNaissance": "17/07/1989",
        "lieuNaissance": "Goustranville",
        "dateEntretien": "10/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "82000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 33,
                    "variableNameQuality": 0.8139499016072578,
                    "duplicate": [
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "82001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 25,
                    "variableNameQuality": 0.8960919637372365,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "82002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 95,
                    "variableNameQuality": 0.3753193901258748,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "82003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 51,
                    "variableNameQuality": 0.7849799327919867,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "82004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 50,
                    "commentCount": 79,
                    "variableNameQuality": 0.050268340666004385,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            },
            {
                "id": "82005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 5,
                    "variableNameQuality": 0.048646887748296175,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "82006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 19,
                    "commentCount": 4,
                    "variableNameQuality": 0.5191367256144209,
                    "duplicate": [
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 83,
        "nom": "Layne",
        "prenom": "Stanislas",
        "dateNaissance": "23/04/1980",
        "lieuNaissance": "Maraye-en-othe",
        "dateEntretien": "15/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "83000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 32,
                    "variableNameQuality": 0.8677101233769252,
                    "duplicate": [
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 38,
                    "commentCount": 66,
                    "variableNameQuality": 0.6346170848256576,
                    "duplicate": [
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 22,
                    "variableNameQuality": 0.6376210886200205,
                    "duplicate": [
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 63,
                    "commentCount": 56,
                    "variableNameQuality": 0.4041858282633797,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 30,
                    "commentCount": 93,
                    "variableNameQuality": 0.249288250441153,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 33,
                    "commentCount": 32,
                    "variableNameQuality": 0.9038783489598038,
                    "duplicate": [
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 21,
                    "variableNameQuality": 0.46651402113204565,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "83007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 94,
                    "commentCount": 34,
                    "variableNameQuality": 0.2743149969005342,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "83008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 69,
                    "commentCount": 20,
                    "variableNameQuality": 0.44749424212479294,
                    "duplicate": [
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "83009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 32,
                    "variableNameQuality": 0.3000749482073749,
                    "duplicate": [
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "83010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 82,
                    "variableNameQuality": 0.8196938997775911,
                    "duplicate": [
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "83011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 25,
                    "variableNameQuality": 0.8829372024114048,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "83012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 90,
                    "variableNameQuality": 0.32487017789501205,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "83013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 91,
                    "variableNameQuality": 0.03249379379242423,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "83014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 12,
                    "variableNameQuality": 0.9713420459453561,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "83015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 47,
                    "commentCount": 64,
                    "variableNameQuality": 0.054038862446843194,
                    "duplicate": [
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 84,
        "nom": "Nibel",
        "prenom": "Brandon",
        "dateNaissance": "30/04/1983",
        "lieuNaissance": "Dhuisy",
        "dateEntretien": "22/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "84000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 33,
                    "variableNameQuality": 0.7665037491885811,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 85,
        "nom": "Brugnera",
        "prenom": "Jocelyn",
        "dateNaissance": "17/01/1995",
        "lieuNaissance": "Boissiere-14",
        "dateEntretien": "16/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "85000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 3,
                    "commentCount": 65,
                    "variableNameQuality": 0.726771111616574,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "85001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 40,
                    "commentCount": 100,
                    "variableNameQuality": 0.764546517569855,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "85002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 74,
                    "variableNameQuality": 0.23791561965947405,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "85003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 8,
                    "variableNameQuality": 0.9622130808761725,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "85004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 34,
                    "variableNameQuality": 0.35867624722423364,
                    "duplicate": [
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "85005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 54,
                    "variableNameQuality": 0.22087342172124536,
                    "duplicate": [
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "85006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 56,
                    "variableNameQuality": 0.5408432075967576,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "85007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 47,
                    "variableNameQuality": 0.9833941232375731,
                    "duplicate": [
                        {
                            "id": 90,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "85008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 28,
                    "variableNameQuality": 0.8311967182650086,
                    "duplicate": [
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "85009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 79,
                    "variableNameQuality": 0.2951060905385843,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "85010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 81,
                    "variableNameQuality": 0.8875561243597607,
                    "duplicate": [
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "85011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 65,
                    "variableNameQuality": 0.506449533186072,
                    "duplicate": [
                        {
                            "id": 61,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "85012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 80,
                    "commentCount": 100,
                    "variableNameQuality": 0.4993238315980896,
                    "duplicate": [
                        {
                            "id": 37,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "85013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 1,
                    "variableNameQuality": 0.414358968744984,
                    "duplicate": [
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "85014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 92,
                    "variableNameQuality": 0.025389734356509486,
                    "duplicate": [
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "85015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 70,
                    "commentCount": 10,
                    "variableNameQuality": 0.16231956656943802,
                    "duplicate": [
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "85016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 12,
                    "commentCount": 27,
                    "variableNameQuality": 0.19300519844193842,
                    "duplicate": [
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "85017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 76,
                    "variableNameQuality": 0.7773895597874988,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "20/09/2018"
                }
            },
            {
                "id": "85018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 66,
                    "commentCount": 87,
                    "variableNameQuality": 0.9884140231893486,
                    "duplicate": [
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 86,
        "nom": "Blanzat",
        "prenom": "Simonetta",
        "dateNaissance": "05/05/1982",
        "lieuNaissance": "Condamine-chatelard",
        "dateEntretien": "13/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "86000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 97,
                    "commentCount": 100,
                    "variableNameQuality": 0.06257753337431149,
                    "duplicate": [
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "86001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 44,
                    "variableNameQuality": 0.6398551703043931,
                    "duplicate": [
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "86002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 58,
                    "variableNameQuality": 0.8837534268634273,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "15/09/2018"
                }
            },
            {
                "id": "86003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 3,
                    "commentCount": 62,
                    "variableNameQuality": 0.22325891645030627,
                    "duplicate": [
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "86004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 95,
                    "variableNameQuality": 0.10264429160301802,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "86005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 34,
                    "variableNameQuality": 0.9551455042848045,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 87,
        "nom": "Goulhot",
        "prenom": "Nunzia",
        "dateNaissance": "30/06/1987",
        "lieuNaissance": "Boissy-saint-leger",
        "dateEntretien": "16/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "87000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 77,
                    "variableNameQuality": 0.12719669077486395,
                    "duplicate": [
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "87001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 93,
                    "variableNameQuality": 0.7594986913107566,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "87002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 83,
                    "variableNameQuality": 0.3868950701030718,
                    "duplicate": [
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "87003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 75,
                    "commentCount": 72,
                    "variableNameQuality": 0.5233047115571543,
                    "duplicate": [
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "87004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 49,
                    "commentCount": 2,
                    "variableNameQuality": 0.41734727494135926,
                    "duplicate": [
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "87005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 50,
                    "variableNameQuality": 0.6671218270725398,
                    "duplicate": [
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "21/09/2018"
                }
            },
            {
                "id": "87006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 52,
                    "variableNameQuality": 0.7977244475098979,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            },
            {
                "id": "87007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 55,
                    "variableNameQuality": 0.12991787439296254,
                    "duplicate": [
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 88,
        "nom": "Leynaert",
        "prenom": "Giuseppe",
        "dateNaissance": "07/09/1993",
        "lieuNaissance": "Foucherans-25",
        "dateEntretien": "7/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "88000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 50,
                    "variableNameQuality": 0.7762570806619172,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "12/09/2018"
                }
            },
            {
                "id": "88001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 90,
                    "commentCount": 88,
                    "variableNameQuality": 0.40375048614391174,
                    "duplicate": [
                        {
                            "id": 3,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "7/09/2018"
                }
            },
            {
                "id": "88002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 79,
                    "commentCount": 26,
                    "variableNameQuality": 0.17907681225463834,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "9/09/2018"
                }
            },
            {
                "id": "88003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 24,
                    "commentCount": 25,
                    "variableNameQuality": 0.6896351933823974,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "10/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 89,
        "nom": "Gadea",
        "prenom": "Juliette",
        "dateNaissance": "28/09/1973",
        "lieuNaissance": "Rainneville",
        "dateEntretien": "9/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "89000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 62,
                    "variableNameQuality": 0.1795882843201515,
                    "duplicate": [
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "89001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 21,
                    "commentCount": 61,
                    "variableNameQuality": 0.549469306915105,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            },
            {
                "id": "89002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 99,
                    "commentCount": 2,
                    "variableNameQuality": 0.3163333071598068,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "89003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 35,
                    "commentCount": 64,
                    "variableNameQuality": 0.22606187328572025,
                    "duplicate": [
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "89004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 35,
                    "variableNameQuality": 0.815495299002058,
                    "duplicate": [
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "13/09/2018"
                }
            },
            {
                "id": "89005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 44,
                    "variableNameQuality": 0.7575133828917863,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "14/09/2018"
                }
            },
            {
                "id": "89006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 24,
                    "variableNameQuality": 0.9741703988464119,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "11/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 3
        }
    },
    {
        "id": 90,
        "nom": "Petault",
        "prenom": "Christy",
        "dateNaissance": "22/04/1991",
        "lieuNaissance": "Castanet-tolosan",
        "dateEntretien": "15/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "90000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 29,
                    "variableNameQuality": 0.8717476614188674,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "19/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 91,
        "nom": "Evenat",
        "prenom": "Sybil",
        "dateNaissance": "26/11/1974",
        "lieuNaissance": "Farschviller",
        "dateEntretien": "1/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "91000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 43,
                    "variableNameQuality": 0.8918357862090376,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "6/09/2018"
                }
            },
            {
                "id": "91001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 68,
                    "commentCount": 61,
                    "variableNameQuality": 0.9789485806924088,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/09/2018"
                }
            }
        ],
        "etat": "Exercice donn\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 92,
        "nom": "Calvas",
        "prenom": "Annette",
        "dateNaissance": "31/12/1971",
        "lieuNaissance": "Glandon",
        "dateEntretien": "24/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "92000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 36,
                    "commentCount": 1,
                    "variableNameQuality": 0.2917281665673427,
                    "duplicate": [
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "92001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 31,
                    "variableNameQuality": 0.047236524204753216,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "26/09/2018"
                }
            },
            {
                "id": "92002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 28,
                    "commentCount": 53,
                    "variableNameQuality": 0.5392112029649044,
                    "duplicate": [
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "24/09/2018"
                }
            },
            {
                "id": "92003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 44,
                    "variableNameQuality": 0.9222497311113053,
                    "duplicate": [
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            }
        ],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 93,
        "nom": "Albaud",
        "prenom": "Winnie",
        "dateNaissance": "16/09/1975",
        "lieuNaissance": "Fremifontaine",
        "dateEntretien": "29/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "93000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 67,
                    "variableNameQuality": 0.9857914055214524,
                    "duplicate": [
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "93001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 34,
                    "commentCount": 55,
                    "variableNameQuality": 0.3942653467014523,
                    "duplicate": [
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "93002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 64,
                    "commentCount": 18,
                    "variableNameQuality": 0.681906756612625,
                    "duplicate": [
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            }
        ],
        "etat": "Code en cours de v\u00e9rification",
        "metrics": {
            "level": 5
        }
    },
    {
        "id": 94,
        "nom": "Marcadieu",
        "prenom": "Diethelm",
        "dateNaissance": "12/01/1981",
        "lieuNaissance": "Vovray-en-bornes",
        "dateEntretien": "28/09/2018",
        "lieuEntretien": "Eiffel",
        "fichiers": [
            {
                "id": "94000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 91,
                    "commentCount": 95,
                    "variableNameQuality": 0.4056167616869615,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "94001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 56,
                    "variableNameQuality": 0.19316546063652706,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "94002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 35,
                    "variableNameQuality": 0.31757016442688235,
                    "duplicate": [
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "94003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 82,
                    "commentCount": 21,
                    "variableNameQuality": 0.8221619826746426,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "94004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 88,
                    "variableNameQuality": 0.7585443829414433,
                    "duplicate": [
                        {
                            "id": 12,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "94005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 19,
                    "variableNameQuality": 0.8818285383702957,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "94006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 96,
                    "commentCount": 40,
                    "variableNameQuality": 0.5090695894520504,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "94007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 98,
                    "commentCount": 71,
                    "variableNameQuality": 0.9460575599435362,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "94008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 56,
                    "commentCount": 90,
                    "variableNameQuality": 0.8444312139321744,
                    "duplicate": [
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "94009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 92,
                    "commentCount": 75,
                    "variableNameQuality": 0.5259992199958303,
                    "duplicate": [
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "94010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 59,
                    "commentCount": 94,
                    "variableNameQuality": 0.4182911417801045,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "94011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 54,
                    "commentCount": 46,
                    "variableNameQuality": 0.9315949893229184,
                    "duplicate": [
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "94012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 60,
                    "commentCount": 90,
                    "variableNameQuality": 0.8600571975798069,
                    "duplicate": [
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 15,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 99,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "94013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 0,
                    "commentCount": 55,
                    "variableNameQuality": 0.5249991148400194,
                    "duplicate": [
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "3/10/2018"
                }
            },
            {
                "id": "94014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 54,
                    "variableNameQuality": 0.3061055642623627,
                    "duplicate": [
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 56,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "94015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 44,
                    "commentCount": 38,
                    "variableNameQuality": 0.7504547522474874,
                    "duplicate": [
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            }
        ],
        "etat": "Recrut\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 95,
        "nom": "Llong",
        "prenom": "Myriam",
        "dateNaissance": "07/10/1973",
        "lieuNaissance": "Tournous-darre",
        "dateEntretien": "18/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [],
        "etat": "Fin de candidature",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 96,
        "nom": "Defauchy",
        "prenom": "Sens",
        "dateNaissance": "18/10/1984",
        "lieuNaissance": "Fahy-les-autrey",
        "dateEntretien": "14/09/2018",
        "lieuEntretien": "Bouygues",
        "fichiers": [
            {
                "id": "96000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 23,
                    "commentCount": 75,
                    "variableNameQuality": 0.3317922235861712,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 97,
        "nom": "Ledhe",
        "prenom": "Ida",
        "dateNaissance": "14/03/1995",
        "lieuNaissance": "Saint-etienne-de-fontbellon",
        "dateEntretien": "16/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "97000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 32,
                    "commentCount": 23,
                    "variableNameQuality": 0.5698640658765811,
                    "duplicate": [
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            },
            {
                "id": "97001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 63,
                    "commentCount": 11,
                    "variableNameQuality": 0.997276778642144,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            },
            {
                "id": "97002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 5,
                    "variableNameQuality": 0.9770896757132733,
                    "duplicate": [
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "17/09/2018"
                }
            },
            {
                "id": "97003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 94,
                    "commentCount": 44,
                    "variableNameQuality": 0.7334205820128598,
                    "duplicate": [
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 37,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "18/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 4
        }
    },
    {
        "id": 98,
        "nom": "Capodici",
        "prenom": "Devon",
        "dateNaissance": "27/02/1985",
        "lieuNaissance": "Naives-en-blois",
        "dateEntretien": "12/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "98000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 39,
                    "commentCount": 97,
                    "variableNameQuality": 0.29421270869643,
                    "duplicate": [
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "16/09/2018"
                }
            }
        ],
        "etat": "Refus",
        "metrics": {
            "level": 2
        }
    },
    {
        "id": 99,
        "nom": "Hadangue",
        "prenom": "Liliana",
        "dateNaissance": "26/04/1974",
        "lieuNaissance": "Lalheue",
        "dateEntretien": "27/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "99000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 45,
                    "commentCount": 67,
                    "variableNameQuality": 0.3723410521140461,
                    "duplicate": [
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "99001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 13,
                    "commentCount": 12,
                    "variableNameQuality": 0.4996204622187661,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 23,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 43,
                    "variableNameQuality": 0.5761111631308697,
                    "duplicate": [
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 33,
                            "similarity": "a+b"
                        },
                        {
                            "id": 53,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 70,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "99003",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 17,
                    "variableNameQuality": 0.7929003032434211,
                    "duplicate": [
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 29,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99004",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 51,
                    "commentCount": 95,
                    "variableNameQuality": 0.8438868651004398,
                    "duplicate": [
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 24,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 94,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 52,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 49,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 12,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "99005",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 18,
                    "commentCount": 4,
                    "variableNameQuality": 0.021864534934156743,
                    "duplicate": [
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99006",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 8,
                    "commentCount": 47,
                    "variableNameQuality": 0.3265594816975598,
                    "duplicate": [
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 32,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99007",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 33,
                    "commentCount": 21,
                    "variableNameQuality": 0.44693394144423926,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99008",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 73,
                    "commentCount": 79,
                    "variableNameQuality": 0.9923216728884916,
                    "duplicate": [
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 96,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "99009",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 50,
                    "variableNameQuality": 0.5776650967922407,
                    "duplicate": [
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "99010",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 76,
                    "variableNameQuality": 0.7859209958309761,
                    "duplicate": [
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "99011",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 2,
                    "commentCount": 68,
                    "variableNameQuality": 0.5808246709576362,
                    "duplicate": [
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "99012",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 76,
                    "commentCount": 22,
                    "variableNameQuality": 0.936479830310679,
                    "duplicate": [
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 62,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99013",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 64,
                    "variableNameQuality": 0.8374291332907728,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "99014",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 52,
                    "variableNameQuality": 0.1534202025399335,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 36,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 19,
                            "similarity": "a+b"
                        },
                        {
                            "id": 67,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 55,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99015",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 14,
                    "commentCount": 25,
                    "variableNameQuality": 0.19744866057793853,
                    "duplicate": [
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 14,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "99016",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 4,
                    "commentCount": 57,
                    "variableNameQuality": 0.05749779554748957,
                    "duplicate": [
                        {
                            "id": 58,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99017",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 93,
                    "commentCount": 82,
                    "variableNameQuality": 0.24448745951809336,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99018",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 8,
                    "commentCount": 39,
                    "variableNameQuality": 0.29392012714953086,
                    "duplicate": [
                        {
                            "id": 14,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 46,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 68,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        },
                        {
                            "id": 61,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 20,
                            "similarity": "a+b"
                        },
                        {
                            "id": 89,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 63,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 47,
                            "similarity": "a+b"
                        },
                        {
                            "id": 0,
                            "similarity": "a+b"
                        },
                        {
                            "id": 25,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 86,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "99019",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 26,
                    "commentCount": 57,
                    "variableNameQuality": 0.049154412423493055,
                    "duplicate": [
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "99020",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 72,
                    "commentCount": 65,
                    "variableNameQuality": 0.3392960878589918,
                    "duplicate": [
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 42,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 27,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 45,
                            "similarity": "a+b"
                        },
                        {
                            "id": 22,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "99021",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 87,
                    "commentCount": 36,
                    "variableNameQuality": 0.9422985926032404,
                    "duplicate": [
                        {
                            "id": 39,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 64,
                            "similarity": "a+b"
                        },
                        {
                            "id": 50,
                            "similarity": "a+b"
                        },
                        {
                            "id": 4,
                            "similarity": "a+b"
                        },
                        {
                            "id": 2,
                            "similarity": "a+b"
                        },
                        {
                            "id": 17,
                            "similarity": "a+b"
                        },
                        {
                            "id": 74,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 57,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 13,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 16,
                            "similarity": "a+b"
                        },
                        {
                            "id": 69,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 51,
                            "similarity": "a+b"
                        },
                        {
                            "id": 77,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99022",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 66,
                    "commentCount": 36,
                    "variableNameQuality": 0.7550844552070068,
                    "duplicate": [
                        {
                            "id": 42,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "1/10/2018"
                }
            },
            {
                "id": "99023",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 93,
                    "commentCount": 29,
                    "variableNameQuality": 0.7474995362965661,
                    "duplicate": [
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 75,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 5,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 87,
                            "similarity": "a+b"
                        },
                        {
                            "id": 66,
                            "similarity": "a+b"
                        },
                        {
                            "id": 40,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 80,
                            "similarity": "a+b"
                        },
                        {
                            "id": 97,
                            "similarity": "a+b"
                        },
                        {
                            "id": 8,
                            "similarity": "a+b"
                        },
                        {
                            "id": 31,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99024",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 55,
                    "commentCount": 34,
                    "variableNameQuality": 0.5438509983601567,
                    "duplicate": [
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 1,
                            "similarity": "a+b"
                        },
                        {
                            "id": 84,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 18,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "99025",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 65,
                    "commentCount": 39,
                    "variableNameQuality": 0.679741509711652,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99026",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 88,
                    "commentCount": 9,
                    "variableNameQuality": 0.9321944411399012,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 41,
                            "similarity": "a+b"
                        },
                        {
                            "id": 6,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 44,
                            "similarity": "a+b"
                        },
                        {
                            "id": 34,
                            "similarity": "a+b"
                        },
                        {
                            "id": 91,
                            "similarity": "a+b"
                        },
                        {
                            "id": 26,
                            "similarity": "a+b"
                        },
                        {
                            "id": 85,
                            "similarity": "a+b"
                        },
                        {
                            "id": 11,
                            "similarity": "a+b"
                        },
                        {
                            "id": 88,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "28/09/2018"
                }
            },
            {
                "id": "99027",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 22,
                    "commentCount": 83,
                    "variableNameQuality": 0.5704896612307186,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "99028",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 77,
                    "commentCount": 50,
                    "variableNameQuality": 0.56638317690928,
                    "duplicate": [
                        {
                            "id": 98,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "2/10/2018"
                }
            },
            {
                "id": "99029",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 67,
                    "commentCount": 21,
                    "variableNameQuality": 0.11823312658833329,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "99030",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 42,
                    "commentCount": 52,
                    "variableNameQuality": 0.6207030122449231,
                    "duplicate": [
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 3,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 72,
                            "similarity": "a+b"
                        },
                        {
                            "id": 43,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99031",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 30,
                    "commentCount": 21,
                    "variableNameQuality": 0.6392003213745653,
                    "duplicate": [
                        {
                            "id": 70,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            },
            {
                "id": "99032",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 6,
                    "commentCount": 72,
                    "variableNameQuality": 0.940495884372644,
                    "duplicate": [
                        {
                            "id": 78,
                            "similarity": "a+b"
                        },
                        {
                            "id": 38,
                            "similarity": "a+b"
                        },
                        {
                            "id": 54,
                            "similarity": "a+b"
                        },
                        {
                            "id": 28,
                            "similarity": "a+b"
                        },
                        {
                            "id": 21,
                            "similarity": "a+b"
                        },
                        {
                            "id": 92,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        },
                        {
                            "id": 35,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 30,
                            "similarity": "a+b"
                        },
                        {
                            "id": 93,
                            "similarity": "a+b"
                        },
                        {
                            "id": 82,
                            "similarity": "a+b"
                        },
                        {
                            "id": 10,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "29/09/2018"
                }
            },
            {
                "id": "99033",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 43,
                    "commentCount": 2,
                    "variableNameQuality": 0.1255873983839364,
                    "duplicate": [
                        {
                            "id": 2,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "30/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 1
        }
    },
    {
        "id": 100,
        "nom": "",
        "prenom": "",
        "dateNaissance": "14/10/1990",
        "lieuNaissance": "",
        "dateEntretien": "23/09/2018",
        "lieuEntretien": "Breguet",
        "fichiers": [
            {
                "id": "100000",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 47,
                    "commentCount": 68,
                    "variableNameQuality": 0.010002507646619807,
                    "duplicate": [],
                    "compteRendu": "Bon code!",
                    "dateUpload": "27/09/2018"
                }
            },
            {
                "id": "100001",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 86,
                    "commentCount": 43,
                    "variableNameQuality": 0.3661017920540405,
                    "duplicate": [
                        {
                            "id": 79,
                            "similarity": "a+b"
                        },
                        {
                            "id": 90,
                            "similarity": "a+b"
                        },
                        {
                            "id": 83,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            },
            {
                "id": "100002",
                "nom": "exercise.py",
                "contenu": "\n#!/usr/bin/env python3\n\nfrom __future__ import print_function\n\n\nclass ListInstance:\n\n    #Mix-in class that provides a formatted print() or str() of instances via\n    #inheritance of __str__ coded here; displays instance attrs only; self is\n    #instance of lowest class; __X names avoid clashing with client's attrs\n\n\n    def __attrnames(self):\n        result = ''\n        for attr in sorted(self.__dict__):\n            result += '\t%s=%s\n' % (attr, self.__dict__[attr])\n        return result\n\n    def __str__(self):\n        return '<Instance of %s, address %s:\n%s>' % (\n            self.__class__.__name__,\n            id(self),\n            self.__attrnames())",
                "nomTest": "test_exercise.py",
                "contenu_Test": "\n#!/usr/bin/env python3\n\ndef tester(listerclass, sept=False):\n\n    class Super:\n\n        def __init__(self):\n            self.data1 = 'spam'\n\n        def ham(self):\n            pass\n\n    class Sub(Super, listerclass):\n\n        def __init__(self):\n            Super.__init__(self)\n            self.data2 = 'eggs'\n            self.data3 = 42\n\n        def spam(self):\n            pass\n\n    instance = Sub()\n    print(instance)\n    if sept:\n        print('-' * 80)\n",
                "stats": {
                    "functionsCount": 83,
                    "commentCount": 36,
                    "variableNameQuality": 0.049907129508731995,
                    "duplicate": [
                        {
                            "id": 29,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 81,
                            "similarity": "a+b"
                        },
                        {
                            "id": 71,
                            "similarity": "a+b"
                        },
                        {
                            "id": 48,
                            "similarity": "a+b"
                        },
                        {
                            "id": 7,
                            "similarity": "a+b"
                        },
                        {
                            "id": 9,
                            "similarity": "a+b"
                        },
                        {
                            "id": 65,
                            "similarity": "a+b"
                        },
                        {
                            "id": 59,
                            "similarity": "a+b"
                        },
                        {
                            "id": 76,
                            "similarity": "a+b"
                        },
                        {
                            "id": 73,
                            "similarity": "a+b"
                        },
                        {
                            "id": 60,
                            "similarity": "a+b"
                        },
                        {
                            "id": 95,
                            "similarity": "a+b"
                        }
                    ],
                    "compteRendu": "Bon code!",
                    "dateUpload": "23/09/2018"
                }
            }
        ],
        "etat": "Postul\u00e9",
        "metrics": {
            "level": 0
        }
    }
]